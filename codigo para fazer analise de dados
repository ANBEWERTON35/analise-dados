import pandas as pd
import PyPDF2
import os
import re

def analyze_pdf_content(text, pdf_reader):
    # Número total de páginas (registros)
    total_pages = len(pdf_reader.pages)
    
    # Variáveis identificadas no documento
    quantitative_vars = [
        "Potência instalada (kWp, MW)",
        "Radiação solar (kWh/m²/dia)",
        "Eficiência de conversão solar (%)",
        "Área útil dos módulos (m²)",
        "Produção anual estimada (kWh/ano)",
        "Tarifas de energia (R$/kWh)",
        "Investimento (R$)",
        "Tempo de retorno (anos)",
        "Taxa interna de retorno (%)",
        "Taxa de juros (%)",
        "Prazos de financiamento (anos)"
    ]
    
    qualitative_vars = [
        "Tipo de tecnologia",
        "Localização geográfica",
        "Setor industrial",
        "Tipo de financiamento",
        "Classificação da planta"
    ]
    
    # Criar DataFrame para a tabela resumo
    var_table = pd.DataFrame({
        'Variável': quantitative_vars + qualitative_vars,
        'Tipo': ['Quantitativa']*len(quantitative_vars) + ['Qualitativa']*len(qualitative_vars),
        'Exemplo': [
            '117,6 kWp', '5,32 kWh/m²/dia', '15%', '1,63 m²', 
            '227.890 kWh/ano', 'R$0,22', 'R$500.000', '5 anos',
            '12%', '6,7%', '10 anos',
            'Silício Policristalino', 'Santa Rita-PB', 
            'Indústria calçadista', 'BNB-FNE Verde', 'Mini geração'
        ]
    })
    
    return total_pages, quantitative_vars, qualitative_vars, var_table

def main():
    # Caminho correto para o arquivo PDF
    pdf_path = os.path.join(
        "B:\\MEUS ARQUIVOS\\BEACAP 02-LEVONO GAMER\\DOCUMENTOS DE ARQUIVO\\TECNOLOGO EM TELEMATICA\\PERIODO 04\\ESTATISTICA APLICADA\\PROJETO DE ESTATISTICA",
        "arquivototal.pdf"
    )
    
    # Verificar se o arquivo existe
    if not os.path.exists(pdf_path):
        print(f"Erro: Arquivo não encontrado em {pdf_path}")
        print("Verifique se:")
        print("1. O arquivo 'arquivototal.pdf' existe no diretório")
        print("2. O nome do arquivo está correto (incluindo maiúsculas/minúsculas)")
        print("3. Você tem permissão para acessar o arquivo")
        return

    try:
        # Ler o PDF com tratamento de erros
        with open(pdf_path, 'rb') as pdf_file:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            
            # Extrair texto com tratamento para páginas vazias
            text = ""
            for page in pdf_reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text
            
            # Analisar o conteúdo
            total_pages, quant_vars, qual_vars, var_table = analyze_pdf_content(text, pdf_reader)

            # Exibir resultados
            print("\n" + "="*50)
            print("ANÁLISE DO DOCUMENTO ACADÊMICO")
            print("="*50)

            print(f"\nNúmero total de páginas (registros): {total_pages}")

            print("\nVariáveis Quantitativas Identificadas:")
            for i, var in enumerate(quant_vars, 1):
                print(f"{i}. {var}")

            print("\nVariáveis Qualitativas Identificadas:")
            for i, var in enumerate(qual_vars, 1):
                print(f"{i}. {var}")

            print("\nTabela Resumo de Variáveis:")
            print(var_table.to_string(index=False))

            # Extrair exemplos de dados quantitativos
            print("\n\nAlguns dados quantitativos encontrados:")
            power_values = re.findall(r'(\d+[,.]\d+\s*(?:kWp|MW))', text)
            radiation_values = re.findall(r'(\d+[,.]\d+\s*kWh/m²)', text)

            if power_values:
                print(f"Exemplos de potência encontrados: {', '.join(set(power_values[:5]))}...")
            if radiation_values:
                print(f"Exemplos de radiação solar: {', '.join(set(radiation_values[:5]))}...")

            print("\n" + "="*50)
            print("OBSERVAÇÃO: Este é um documento acadêmico, não um dataset tabular.")
            print("As variáveis foram identificadas a partir do conteúdo textual.")
            print("="*50)

    except PyPDF2.errors.PdfReadError as e:
        print(f"Erro ao ler o arquivo PDF: {str(e)}")
        print("O arquivo pode estar corrompido ou não é um PDF válido.")
    except Exception as e:
        print(f"Erro inesperado: {str(e)}")

if __name__ == "__main__":
    main()
